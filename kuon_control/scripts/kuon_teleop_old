#! /usr/bin/env python

###############################################################################
#
# Package:  kuon
#
# File: kuon_teleop_viewer
#
## \file 
##
## $LastChangedDate: 2012-12-06 16:33:18 -0700 (Thu, 06 Dec 2012) $
## $Rev: 330 $
##
## \brief Kuon teleoporation viewer node. (under development).
##
## \author Daniel Packard (daniel@roadnarrows.com)
## \author Robin Knight (robin.knight@roadnarrows.com)
##  
## \par Copyright:
##   (C) 2013-2014.  RoadNarrows LLC.\n
##   (http://www.roadnarrows.com)\n
##   All Rights Reserved
##
# @EulaBegin@
# @EulaEnd@
#
###############################################################################

import sys
import os
import time
import math
import getopt

#from Tkinter import *
#from Tkconstants import *
#from tkFileDialog import *
#import tkFont

#from PIL import Image, ImageTk

#import webbrowser
#import xml.parsers.expat as expat

import roslib; roslib.load_manifest('kuon_control')
import rospy

from kuon_control.msg import BrakeCmd           # publish
from kuon_control.msg import KuonState          # subscribe (TBD)
from kuon_control.msg import KuonStatus         # subscribe
from kuon_control.msg import SlewCmd            # publish
from kuon_control.msg import SpeedCmd           # publish
from kuon_control.msg import Version            # service
from kuon_control.srv import IncrementGovernor  # service (TBD)
from kuon_control.srv import EStop              # service
from kuon_control.srv import ResetEStop         # service
from kuon_control.srv import QueryVersion       # service (TBD)

from hid.msg import Controller360State
from hid.msg import LEDPattern
from hid.srv import SetLED
from hid.srv import SetRumble

import kuon_control.msg


# ------------------------------------------------------------------------------
# Globals
# ------------------------------------------------------------------------------

## \brief Application version. Update as needed. 
appVersion = '1.0.0'

## \brief Image search paths. (future)
imagePath = [
  "/prj/pkg/Kuon/share/images",
  "/usr/local/share/Kuon/images",
  "/prj/pkg/appkit/share/images",
  "/usr/local/share/appkit/images"
]

## \brief User's home directory.
home = os.path.expanduser("~")

## \brief Kuon user-specific configuration directory (in home directory).
kuonUserDirName = ".kuon"

## \brief kuon_teleop application configuration file name (future).
configFileName = "kuon_teleop.xml"

## \brief Configuration default.
configDft = \
{
}

## \brief Common foreground colors.
fgColors = {
  'normal':   'black',
  'ok':       '#008800',
  'focus':    '#0000aa',
  'warning':  '#aa6600',
  'error':    '#cc0000'
}

COLOR_PRE           = '\033['     ##< color escape sequence prefix
COLOR_POST          = '\033[0m'   ##< color escape sequence postfix
COLOR_RED           = '0;31m'     ##< normal red
COLOR_GREEN         = '0;32m'     ##< normal green


# ------------------------------------------------------------------------------
# Utilities
# ------------------------------------------------------------------------------

#
## Round to nearest 100th.
#
def round100th(x):
  return math.floor((x + 0.005) * 100.0) / 100.0

#
## Round to nearest 10th.
#
def round10th(x):
  return math.floor((x + 0.05) * 10.0) / 10.0

#
## Degrees to radians.
#
def degToRad(deg):
  return deg / 180.0 * math.pi

#
## Radians to degrees.
#
def radToDeg(rad):
  return rad / math.pi * 180.0


# ------------------------------------------------------------------------------
# Exception Class usage
# ------------------------------------------------------------------------------

##
## \brief Unit test command-line exception class.
##
## Raise usage excpetion.
##
class usage(Exception):

  ##
  ## \brief Constructor.
  ##
  ## \param msg   Error message string.
  ##
  def __init__(self, msg):
    ## error message attribute
    self.msg = msg


# ------------------------------------------------------------------------------
# Class application
# ------------------------------------------------------------------------------

##
## \brief Kuon teleop application.
##
class application():

  #
  ## \brief Constructor.
  #
  def __init__(self):
    self._Argv0 = __file__
    self.initData()

  #
  ## \brief Print usage error.
  ##
  ## \param emsg  Error message string.
  #
  def printUsageErr(self, emsg):
    if emsg:
      print "%s: %s" % (self._Argv0, emsg)
    else:
      print "%s: error" % (self._Argv0)
    print "Try '%s --help' for more information." % (self._Argv0)

  ## \brief Print Command-Line Usage Message.
  def printUsage(self):
    print \
"""
usage: %s [OPTIONS] <image_dir>

     %s --help

Options and arguments:

-h, --help                : Display this help and exit.
"""  % (self._Argv0, self._Argv0)
 
  #
  ## \brief Get command-line options
  ##  
  ## \param argv          Argument list. If not None, then overrides
  ##                      command-line arguments.
  ## \param [out] kwargs  Keyword argument list.  
  ##
  ## \return Parsed keyword arguments.
  #
  def getOptions(self, argv=None, **kwargs):
    if argv is None:
      argv = sys.argv

    self._Argv0 = kwargs.get('argv0', __file__)

    # defaults
    kwargs['debug'] = 0

    # parse command-line options
    try:
      opts, args = getopt.getopt(argv[1:], "?h",
          ['help', ''])
    except getopt.error, msg:
      raise usage(msg)
    for opt, optarg in opts:
      if opt in ('-h', '--help', '-?'):
        self.printUsage()
        sys.exit(0)

    #if len(args) < 1:
    #  self.printUsageErr("No input xml file specified")
    #  sys.exit(2)
    #else:
    #  kwargs['filename'] = args[0]

    return kwargs

  #
  ## \brief Initialize data
  #
  def initData(self):
    ## \brief XBox button function map in First Person mode.
    self.m_xboxMap = { \
      'a_button':         self.noop,
      'b_button':         self.estop,
      'x_button':         self.noop,
      'y_button':         self.noop,

      'dpad_left':        self.noop,
      'dpad_right':       self.noop,
      'dpad_up':          self.govUp,
      'dpad_down':        self.govDown,

      'back_button':      self.pause,
      'start_button':     self.startResume,
      'center_button':    self.noop,

      'left_joy_click':   self.noop,
      'left_joy_x':       self.move,
      'left_joy_y':       self.move,

      'right_joy_click':  self.noop,
      'right_joy_x':      self.noop,
      'right_joy_y':      self.noop,

      'left_bump':        self.noop,
      'right_bump':       self.noop,
      'left_trig':        self.brake,
      'right_trig':       self.slew,
    }

    # XBox LED patterns
    self.m_xboxLEDOff     = LEDPattern.XBOX_LED_ALL_OFF
    self.m_xboxLEDPaused  = LEDPattern.XBOX_LED_ALL_BLINK
    self.m_xboxLEDRun     = LEDPattern.XBOX_LED_ALL_SPIN
    self.m_xboxLEDEStop   = LEDPattern.XBOX_LED_ALL_SPIN_2

    ## \brief Teleoperation state.
    self.m_teleop = { \
      'op_state':   'uninit',             # operational state
      'user_move':  False,                # [not] user control move
      'map':        self.m_xboxMap,       # xbox button-function map
      'xbox':       None                  # previous xbox state
    }
    
    self.m_robotStatus  = None

    self.m_estopState   = { 'count':  0, 't0': 0 }

    self.m_oldEStop = False


  #
  ## \brief Initialize ROS interface
  #
  def initROSInterface(self):
    rospy.init_node("kuon_teleop")

    # subscribe to extended robot status data
    rospy.Subscriber("kuon_control/kuon_status", 
                     KuonStatus, 
                     self.updateRobotStatus) 

    # subscribe to XBox 360 controller state
    rospy.Subscriber("xbox_360/controller_360_state",
                     Controller360State,
                     self.updateXbox)

    # publish speed command
    self.m_pub_speed_cmd = rospy.Publisher("kuon_control/speed_cmd", SpeedCmd)

    # publish brake command
    self.m_pub_brake_cmd = rospy.Publisher("kuon_control/brake_cmd", BrakeCmd)

    # publish slew command
    self.m_pub_slew_cmd = rospy.Publisher("kuon_control/slew_cmd", SlewCmd)

  #
  ## \brief Show information message.
  ##
  ## \param msg   Info message string.
  #
  def showInfo(self, msg):
    print "%s%s%s%s" % (COLOR_PRE, COLOR_GREEN, msg, COLOR_POST)

  #
  ## \brief Show error message.
  ##
  ## \param msg   Error message string.
  #
  def showError(self, msg):
    print "%s%s%s%s" % (COLOR_PRE, COLOR_RED, msg, COLOR_POST)

  #
  ## \brief Run application.
  ##    
  ## \param argv    Optional argument list to override command-line arguments.
  ## \param kwargs  Optional keyword argument list.
  ##
  ## \return Exit code.
  #
  def run(self, argv=None, **kwargs):
  
    # parse command-line options and arguments
    kwargs = self.getOptions(argv, **kwargs)

    # initialize interface
    self.initROSInterface()

    self.showInfo("--- Begin teleoperation, manual operation is paused.")

    rospy.on_shutdown(self.handler)

    rospy.spin()

    return 0

  def handler(self):
    self.stop()
    self.setLED(self.m_xboxLEDOff)
    self.showInfo("--- End teleoperation.")

  #.............................................................................
  # Subscribed Topics
  #.............................................................................

  #
  ## \brief Received robot extended status message callback.
  ##
  ## \param status  Robot status extended message.
  #
  def updateRobotStatus(self, status):
    if self.m_robotStatus is not None:
      self.m_oldEStop = self.m_robotStatus.e_stopped;
    self.m_robotStatus = status;
    if self.m_robotStatus.e_stopped != self.m_oldEStop:
      self.setTeleopLED()

  #
  ## \brief Received joint extended state message callback.
  ##
  ## \param xbox   Received xbox state message.
  #
  def updateXbox(self, xbox):
    if self.m_teleop['op_state'] == 'ready':
      self.execButton(xbox)
    elif self.m_teleop['op_state'] == 'paused':
      if xbox.start_button != self.m_teleop['xbox'].start_button:
        self.startResume('start_button', xbox)
    elif self.m_teleop['op_state'] == 'uninit':
      self.m_teleop['op_state'] = 'paused'
      self.setTeleopLED()
    self.m_teleop['xbox'] = xbox

  #.............................................................................
  # Execution and Support
  #.............................................................................

  def execButton(self, xbox):
    for bttn, func in self.m_teleop['map'].items():
      func(bttn, xbox)

  def getButton(self, bttn, xbox):
    return xbox.__getattribute__(bttn)

  def buttonOffToOn(self, bttn, xbox):
    newState = self.getButton(bttn, xbox)
    oldState = self.getButton(bttn, self.m_teleop['xbox'])
    if newState and newState != oldState:
      return True
    else:
      return False

  def ready(self):
    if self.m_teleop['op_state'] != 'ready':
      return False
    elif self.m_robotStatus is None:
      return False
    else:
      return True

  def canMove(self):
    if not self.ready():
      return False
    elif self.m_robotStatus.e_stopped:
      return False
    else:
      return True

  def setLED(self, pattern):
    try:
      rospy.wait_for_service("xbox_360/set_led", timeout=1)
    except rospy.ROSException, e:
      self.showError('SetLED: ' + e.message + '.')
      return
    try:
      set_led = rospy.ServiceProxy('xbox_360/set_led', SetLED)
      req = LEDPattern()
      req.val = pattern
      set_led(req)
    except rospy.ServiceException, e:
      self.showError("SetLED request failed: %s." % (e.message))
      return

  def setTeleopLED(self):
    if self.m_teleop['op_state'] == 'paused':
      self.setLED(self.m_xboxLEDPaused)
    elif  self.m_robotStatus is not None and self.m_robotStatus.e_stopped:
      self.setLED(self.m_xboxLEDEStop)
    elif self.m_teleop['op_state'] == 'ready':
      self.setLED(self.m_xboxLEDRun)
    else:
      self.setLED(self.m_xboxLEDOff)

  #.............................................................................
  # XBox Button Associated Functions
  #.............................................................................

  def noop(self, bttn, xbox):
    pass

  def pause(self, bttn, xbox):
    if self.buttonOffToOn(bttn, xbox):
      self.m_teleop['op_state'] = 'paused'
      self.setTeleopLED()
      self.showInfo("Manual operation paused, auto mode enabled.")

  def startResume(self, bttn, xbox):
    if self.m_robotStatus is None:
      return
    elif self.buttonOffToOn(bttn, xbox):
      self.m_teleop['op_state'] = 'ready'
      self.setTeleopLED()
      self.showInfo("Manual operation active, auto mode disabled.")

  #
  ## \brief (Reset) emergency stop callback.
  ##
  ##  Requires double click.
  #
  def estop(self, bttn, xbox):
    if not self.buttonOffToOn(bttn, xbox):
      return
    elif not self.ready():
      return

    # estop
    if not self.m_robotStatus.e_stopped:
      self.m_estopState['count'] += 1
      # first click
      if self.m_estopState['count'] == 1:
        self.m_estopState['t0'] = time.time()
        return
      # second click
      elif self.m_estopState['count'] == 2:
        t1 = time.time()
        dt = t1 - self.m_estopState['t0']
        # too slow - count as first click
        if dt > 0.25:
          self.m_estopState['count'] = 1
          self.m_estopState['t0'] = t1
          return
      # nth click (bug)
      else:
        self.m_estopState['count'] = 0
        self.m_estopState['t0'] = 0
        return

      # reset
      self.m_estopState['count'] = 0
      self.m_estopState['t0'] = 0

      try:
        rospy.wait_for_service("kuon_control/estop", timeout=1)
      except rospy.ROSException, e:
        self.showError('Emergency stop: ' + e.message + '.')
        return
      try:
        estop = rospy.ServiceProxy('kuon_control/estop', EStop)
        estop()
      except rospy.ServiceException, e:
        self.showError("Emergency stop request failed: %s." % (e.message))
        return
      self.setLED(self.m_xboxLEDEStop)
      self.showError("Kuon emergency stopped.")

    # reset estop
    else:
      try:
        rospy.wait_for_service("kuon_control/reset_estop", timeout=1)
      except rospy.ROSException, e:
        self.showError('Reset emergency stop: ' + e.message + '.')
        return
      try:
        reset_estop = rospy.ServiceProxy('kuon_control/reset_estop', ResetEStop)
        reset_estop()
      except rospy.ServiceException, e:
        self.showError("Reset emergency stop request failed: %s." % (e.message))
        return
      self.showInfo("Kuon emergency stop has been reset.")
      self.setTeleopLED()
  
  def govUp(self, bttn, xbox):
    if not self.buttonOffToOn(bttn, xbox):
      return
    self.govSet(0.1)

  def govDown(self, bttn, xbox):
    if not self.buttonOffToOn(bttn, xbox):
      return
    self.govSet(-0.1)

  def govSet(self, delta):
    try:
      rospy.wait_for_service("kuon_control/increment_governor", timeout=1)
    except rospy.ROSException, e:
      self.showError('Inc/dec governor: ' + e.message + '.')
      return
    try:
      incgov = rospy.ServiceProxy('kuon_control/increment_governor',
          IncrementGovernor)
      rc = incgov(delta=delta)
    except rospy.ServiceException, e:
      self.showError("Inc/dec governor request failed: %s." % (e.message))
      return
    value = rc.value * 100.0
    self.showInfo("Kuon governor at %3.1f%% of maximum power." % (value))

  def move(self, bttn, xbox):
    if not self.canMove():
      return

    joy_x = self.getButton('left_joy_x', xbox)
    joy_y = self.getButton('left_joy_y', xbox)

    # mix throttle x and y values
    speedLeft  = joy_x + joy_y;
    speedRight = joy_y - joy_x;

    # scale 16-bit throttle values to 9-bit speed values
    speedLeft  >>= 7;
    speedRight >>= 7;

    # cap speeds
    if speedLeft > 249:
      speedLeft = 249
    elif speedLeft < -249:
      speedLeft = -249
    if speedRight > 249:
      speedRight = 249
    elif speedRight < -249:
      speedRight = -249
    #print "(%d, %d) -> (%d, %d)" % (joy_x, joy_y, speedLeft, speedRight)

    cmd = SpeedCmd()
    cmd.left  = speedLeft
    cmd.right = speedRight
    #print "(%d, %d)" % (cmd.left, cmd.right)
    self.m_pub_speed_cmd.publish(cmd)

  def brake(self, bttn, xbox):
    if not self.canMove():
      return
    trigger = self.getButton(bttn, xbox)
    brake = 31 - 31.0 * trigger/255.0
    cmd = BrakeCmd()
    cmd.val = int(brake)
    self.m_pub_brake_cmd.publish(cmd)

  def slew(self, bttn, xbox):
    if not self.canMove():
      return
    trigger = self.getButton(bttn, xbox)
    slew = 80.0 * trigger/255.0
    cmd = SlewCmd()
    cmd.val = int(slew)
    self.m_pub_slew_cmd.publish(cmd)

  #
  ## \brief Brake to stop.
  #
  def stop(self):
    if not self.canMove():
      return
    cmd = SpeedCmd()
    cmd.left  = 0;
    cmd.right = 0;
    self.m_pub_speed_cmd.publish(cmd)
    self.showInfo("Stopped.")


# ------------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------------
if __name__ == '__main__':
  app = application();
  sys.exit( app.run() );
